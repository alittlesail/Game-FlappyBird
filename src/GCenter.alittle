
//[[
//	编辑器中心逻辑，主要处理主界面逻辑
//]]

namespace FlappyBird;

protected var g_GConfig:ALittle.IJsonConfig;

class GCenter
{
    private ALittle.DisplayLayout _main_layer;
    private ALittle.DisplayLayout _dialog_layer;
    private ALittle.DisplayObject _main_scene;
    
    private ALittle.Text _max_score_text;
    private ALittle.DisplayLayout _main_menu;
    private ALittle.DisplayObject _game_over;
    private ALittle.DisplayObject _game_title;
    private ALittle.ImagePlay _bird;
    private ALittle.DisplayObject _tip_1;
    private ALittle.DisplayObject _tip_2;
    
    private ALittle.Text _score_text;
    
    private ALittle.DisplayLayout _pipe_container;
    private int _next_pipe_gap;
    private int _next_pipe_up;

    private ALittle.LoopFrame _frame_anti;

    private int _ground_frame_acc;
    private ALittle.DisplayObject _ground;
    private ALittle.DisplayObject _bg;
    private bool _flying;
    private bool _dieing;

    public ctor()
    {
	}
    
    public fun Setup()
    {
        // 获取配置信息
        g_GConfig = ALittle.CreateConfigSystem(g_ModuleBasePath.."/User.cfg");
        // 生成随机数种子
        ALittle.Math_RandomSeed(ALittle.Time_GetCurTime());
        // 设置5个线程
        ALittle.System_SetThreadCount(1);
    
        // 创建主层
        this._main_layer = new ALittle.DisplayLayout(g_Control);
        this._main_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._main_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._main_layer, null);
        this._dialog_layer = new ALittle.DisplayLayout(g_Control);
        this._dialog_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._dialog_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._dialog_layer, null);
    
        // 创建主界面
        this._main_scene = g_Control.CreateControl{ALittle.DisplayObject}("main_scene", this, this._main_layer);
        this._main_scene.visible = false;

        this._main_menu = g_Control.CreateControl{ALittle.DisplayLayout}("main_menu", this, null);
        this._dialog_layer.AddChild(this._main_menu, null);
        this._main_menu.visible = true;
        
        this._game_over.visible = false;
        this._game_title.visible = true;

        this._max_score_text._user_data = g_GConfig.GetConfig("max_score", 0);        
        this._max_score_text.text = this._max_score_text._user_data;
        
        this._frame_anti = new ALittle.LoopFrame(bind(this.LoopGroundFrame, this));
    }

    public fun Restart()
    {
        this._ground_frame_acc = 0;
        this._next_pipe_gap = 0;
        this._next_pipe_up = 50;
        this._flying = false;
        this._dieing = false;
        this._bird.y = this._bg.height / 2;
        this._bird.x = 0;
        this._bird.angle = 0;
        this._bird.visible = true;
        this._bird.Play();
        this._game_over.visible = false;
        
        // 分数清0
        this._score_text.text = "0";
        this._score_text._user_data = 0;
    
        // 清空容器
        this._pipe_container.RemoveAllChild();

        this._frame_anti.Start();
    }

    public fun LoopGroundFrame(int frame_time)
    {
        var scale = 20;

        if (!this._dieing)
        {
            var cur_score = cast<int>(this._score_text._user_data) + frame_time;
            this._score_text._user_data = cur_score;
            this._score_text.text = ALittle.Math_Floor(cur_score / 100);
        }

        // 处理地板
        var total_time = (this._ground.width - this._main_scene.width) * scale;
        this._ground_frame_acc += frame_time;
        if (this._ground_frame_acc > total_time)
            this._ground_frame_acc = cast<int>((this._ground_frame_acc % total_time));
        this._ground.x = - this._ground_frame_acc /  scale;
        

        // 如果鸟没有到中间，那么就往前飞
        if (this._bird.x + this._bird.width / 2 < this._bg.width / 2)
        {
            this._bird.x = this._bird.x + (frame_time / scale);
        }
        else
        {
            // 处理管道
            var create_pipe = false;
            // 如果没有管道，那么就生成一个
            if (this._pipe_container.child_count == 0)
            {
                create_pipe = true;
            }
            // 如果最后一个走的比较远了，那么就生成一个
            else
            {
                var pipe = this._pipe_container.childs[this._pipe_container.child_count];
                var right = pipe.x + pipe.width;
                if (this._bg.width - right > this._next_pipe_gap)
                    create_pipe = true;

                pipe = this._pipe_container.childs[1];
                if (pipe.x + pipe.width < 0)
                    this._pipe_container.RemoveChild(pipe);
            }

            if (create_pipe)
            {
                var pipe = g_Control.CreateControl{ALittle.DisplayObject}("pipe");
                this._pipe_container.AddChild(pipe);
            
                var total_height = this._bg.height - this._ground.height;
                var half_height = total_height / 2;

                // 随机上面还是下面
                if (ALittle.Math_RandomInt(1, 100) <= this._next_pipe_up)
                {
                    var min_y = ALittle.Math_Floor(-pipe.height + pipe.height / 4);
                    var max_y = ALittle.Math_Floor(half_height - pipe.height);
                    pipe.y = ALittle.Math_RandomInt(min_y, max_y);

                    this._next_pipe_up = 30;
                }
                else
                {
                    var min_y = ALittle.Math_Floor(half_height);
                    var max_y = ALittle.Math_Floor(total_height - pipe.height / 4);
                    pipe.y = ALittle.Math_RandomInt(min_y, max_y);
                
                    this._next_pipe_up = 70;
                }
                pipe.x = this._bg.width;

                this._next_pipe_gap = ALittle.Math_RandomInt(50, 100);
            }

            // 全部向左移动
            for (var index, child in this._pipe_container.childs)
            {
                child.x = child.x - (frame_time / scale);
            }
        }

        if (this._dieing)
        {
            // 已经死亡，那么就往下掉
            this._bird.y = this._bird.y + (frame_time / scale) * 2;
            if (this._bird.y <= 0 || this._bird.y + this._bird.height >= this._bg.height - this._ground.height)
            {
                this.ShowGameOver();
            }
        }
        else
        {
            // 鸟往下掉
            if (this._flying)
                this._bird.y = this._bird.y - (frame_time / scale) * 2;
            else
                this._bird.y = this._bird.y + (frame_time / scale) * 1.5;

            // 判断死亡
            for (var index, child in this._pipe_container.childs)
            {
                var left = this._bird.x + 5;
                var right = this._bird.x + this._bird.width - 5;
                var top = this._bird.y + 5;
                var bottom = this._bird.y + this._bird.height - 5;
                if ((left > child.x && left <= child.x + child.width || right > child.x && right <= child.x + child.width)
                    && (top > child.y && top <= child.y + child.height || bottom > child.y && bottom <= child.y + child.height))
                {
                    this._dieing = true;
                    break;
                }
            }

            if (this._bird.y <= 0 || this._bird.y + this._bird.height >= this._bg.height - this._ground.height)
                this._dieing = true;

            if (this._dieing)
            {
                this._bird.angle = -60;
                this._bird.Stop();
            }
        }
    }
    
    public fun HandleStartClick(ALittle.UIClickEvent event)
    {
        this._main_menu.visible = false;
        this._main_scene.visible = true;

        this.Restart();
    }
    
    public fun HandleLButtonDown(ALittle.UILButtonDownEvent event)
    {
        this._tip_1.visible = false;
        this._tip_2.visible = false;
        this._flying = true;
    }
    
    public fun HandleLButtonUp(ALittle.UILButtonUpEvent event)
    {
        this._flying = false;
    }
    
    public fun ShowGameOver() : bool
    {
        this._main_menu.visible = true;
        this._main_scene.visible = false;
    
        this._game_over.visible = true;
        this._game_title.visible = false;
        
        this._bird.Stop();
        this._frame_anti.Stop();
        
        var cur_socre = ALittle.Math_Floor(cast<int>(this._score_text._user_data) / 100);
        if (cast<int>(this._max_score_text._user_data) < cur_socre)
        {
            this._max_score_text._user_data = cur_socre;
            this._max_score_text.text = this._max_score_text._user_data;
            g_GConfig.SetConfig("max_score", cur_socre, null);
        }
        return true;
    }
    
    public fun Shutdown()
    {
        this._bird.Stop();
        this._frame_anti.Stop();
    }
}
    
protected var g_GCenter = new GCenter();